1)
Problema:
    No arquivo main-controller.js, havia uma variável "let count = 0" que não estava sendo utilizada, conforme código abaixo.

    let count = 0;

    const logoImg = document.getElementsByTagName("img")[0];

    function showLogo() {
    setTimeout(function () {
        console.log("Aguardou 2 segundos.");
        const logoTimer = function () {
        let count = 0;
        const intervalId = setInterval(function () {
            console.log("count: " + count);
            logoImg.style.opacity = count * 0.01;
            count++;
            if (count > 80) clearInterval(intervalId);
        }, 30);
        };
        logoTimer();
    }, 1500);
    }

Solução:
    Removida variável não utilizada.

_____________________________________________________________
2)
Problema:
    No arquivo select-campaign-controller.js, estava sendo acusado o seguinte erro para "this.newDiv" e "this.newButton"
'Expected an assignment or function call and instead saw an expression.'

    class CampaignManager {
    constructor() {
        this.newDiv;
        this.newButton;
        this.tableHolder = document.getElementsByName("table-holder");
        this.addButton = document.getElementById("add");
        this.sortButton = document.getElementById("sort");
        this.campaigns = [];
    }

Solução:
    Para corrigir isto, foi necessário remover a declaração das duas variáveis dentro do construtor, transformando elas em variáveis locais 
dos métodos. Contudo, como newDiv e newButton estavam agindo como "variáveis globais" para a Classe, foi necessário mesclar alguns métodos
para que fosse devidamente acessado.
Sendo, newDiv e newButton foram criados e chamados apenas quando foram utilizados dentro dos seus devidos métodos.
O método createNewDiv, createNewButton, nameButton e appendElements foram unidos em createNewButton conforme abaixo:

    createNewButton(name) {
        const newButton = document.createElement("button");
        newButton.type = "submit";
        newButton.classList.add(
        "btn",
        "btn-dark",
        "themys-button",
        "themys-button-transp"
        );

        const formatString = (str) => {
            const lower = str.toLowerCase();
            const first = lower.slice(0, 1).toUpperCase();
            const last = lower.slice(-1).toUpperCase();
            const middle = lower.slice(1, -1);
            return first.concat(middle, last);
        };
    
        newButton.textContent = formatString(name);

        (function appendElements(newButton, tableHolder) {
            const newDiv = document.createElement("div");
            newDiv.classList.add("p-3");
            newDiv.appendChild(newButton);
            tableHolder.appendChild(newDiv);
        })(newButton, this.tableHolder[0]);
    }

Sem mais problemas em select-campaign-controller após isto.
_____________________________________________________________
3)
Problema:
    No arquivo base-form-validator.js, o JSHint estava acusando inumeros erros devido a uma Arrow Function, sendo estes os abaixo:

    Expected an identifier and instead saw '=>'.
    47	Unexpected '{'.
    48	Class properties must be methods. Expected '(' but instead saw 'String'.
    48	'function closure expressions' is only available in Mozilla JavaScript extensions (use moz option).
    49	Expected an identifier and instead saw '.'.
    49	'function closure expressions' is only available in Mozilla JavaScript extensions (use moz option).
    50	Expected an identifier and instead saw '.'.
    51	Expected an identifier and instead saw '/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/'.
    52	'function closure expressions' is only available in Mozilla JavaScript extensions (use moz option).
    52	Expected an identifier and instead saw ';'.
    53	Unnecessary semicolon.

A parte do código original era esta:

    isFormatValid = (email) => {
        return String(email)
        .toLowerCase()
        .match(
            /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
        );
    };

Solução:
    Para resolver o problema, foi isolada a Arrow Function dentro de um método conforme abaixo:

    isFormatValid(email) {
        const isValid = (email) => {
        return String(email)
            .toLowerCase()
            .match(
            /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
            );
        };
_____________________________________________________________
4)
Problema:
    Ainda no arquivo base-form-validator.js, foi encontrado os seguintes problemas logo no construtor:

    Three undefined variables
        13	form
        24	form
        21	email
        21	password

        Two unused variables
        7	email
        8	password

    Sendo este o código original para referência:
    class FormValidator {
        constructor() {
            this.form = document.getElementById("form");
            const email = document.getElementById("email").value;
            const password = document.getElementById("password").value;
            this.minimumLength = 8;

Solução:
    Para satisfazer a solução para o problema, foi alterado a maneira que era declarado "email" e "password".
Isto acabou também por alterar como as variáveis eram chamadas no método validateForm().
O trecho do código final ficou assim:

    class FormValidator {
    constructor() {
        this.form = document.getElementById("form");
        this.email = document.getElementById("email");
        this.password = document.getElementById("password");
        this.minimumLength = 8;
    }

    init() {
        form.addEventListener("submit", (event) => {
        event.preventDefault();
        window.alert("A " + event.type + " was initiated.");
        this.validateForm();
        });
    }

    validateForm() {
        if (
        !this.verifyEmail(this.email.value) ||
        !this.verifyPassword(this.password)
        )
        return;

        form.submit();
        this.redirectTo();
    }

Para corrigir a questão dos "forms", foi incluso a keyword "this" antes de "form" para referenciar a variável declarada no construtor.
_____________________________________________________________
5)
Problema:
    No arquivo sign-in-validator.js, foi encontrado os seguintes problemas:

14	Confusing use of '!'.
26	Misleading line break before '?'; readers may interpret this as an expression boundary.
34	Misleading line break before '?'; readers may interpret this as an expression boundary.

Solução:
    Corrigido o problema de misleading line break transformando em um if literal:
            if (event.target.value.length < 8) {
                event.target.setCustomValidity('Your password must contain at least 8 characters.');
            } else {
                event.target.setCustomValidity('');
            }
        
    Corrigido o problema de Confusing use of ! invertendo a ordem das comparações para:
        validateForm() {
            if (password.value === confirmPassword.value) {
                super.redirectTo();
            }
            
            confirmPassword.setCustomValidity('Password doesn\'t match. Please verify.');
            return;
        }

_____________________________________________________________
6)
Problema
    No arquivo base-form-validator, encontrado o seguinte erro no construtor:
        7	['email'] is better written in dot notation.
    
    Original:
        this.email = form.elements['email'];

Correção:
    Transformado para this.email = form.elements.email;