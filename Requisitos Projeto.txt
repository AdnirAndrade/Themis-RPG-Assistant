*** Primeira etapa ***

Caixas de Diálogo
	prompt	
		//	select-campaign-controller -> requestName()
	alert
		// log-in | base-form-validator -> Email validation
	confirm
		// select-campaign-controller -> requestName()

Temporizadores
	setInterval
		// main-controller -> showLogo()
	setTimeout
		// main-controller -> showLogo()

Funções
	Função anônima com argumento
		// character-creation-controller -> const changeName = function (firstName, lastName)
	Função anônima sem argumento
		// character-creation-controller -> $('#random-name').click(function ()
	Função anônima com retorno
		// select-campaign-controller -> const formatString = function (originalString)
	Função auto-executável - não será aceita a mesma do Module Pattern
		// first-screen-controller -> Auto-executable function that I need to refine
	Função com nome
		// second-screen-controller -> Varias
	Função aninhada/local - declarar uma função dentro de outra
		// select-campaign-controller -> updateButtonContent()
	Passagem de uma função como parâmetro para outra função - ambas as funções precisam ser implementadas pelo aluno
		// first-screen-controller -> function createOptions(firstValue, lastValue, selectDropdown, select) [selectDropdown is the callback]
	Função Flecha - Arrow Function
		// character-creation-controller -> Varias

Eventos
	Evento de carregamento do documento - onload
		// main.html -> <body onload="showLogo()">
	Evento de movimento do mouse
		// campaign-view-controller -> fancy buttons
	Evento de teclado - usar charCode ou keyCode
		// first-screen-controller -> Auto-executable function that I need to refine
	Eventos de formulário - usar onfocus e onblur 
		// first-screen-controller -> Focus and Blur sexy events
	Imprimir alguma propriedade/atributo do objeto event recebido como parâmetro na função tratadora de evento
		// base-form-validator -> init() [commented]

Acesso aos elementos DOM do HTML
	Via referência DOM pelo id do elemento HTML - acesso sem uso do getElementByID ou querySelector, o id do objeto DOM é o próprio nome da variável
		// first-screen-controller -> thisIsTotallyNotRecommended
	Via getElementByID()
		// second-screen-controller -> Varias
	Via getElementsByName()
		// select-campaign-controller -> document.getElementsByName('table-holder')
	Via getElementsByTagName()
		// main-controller -> document.getElementsByTagName("img")[0]
	Via seletores CSS usados na função querySelector() ou querySelectorAll()
		// select-campaign-controller -> updateButtonContent()

Tratadores de Evento
	Especificar o tratador de evento inline - registro do evento no HTML
		// main.html -> onclick="window.location.href='/sign-in';"
	Especificar o tratador de evento no modo tradicional - registro do evento no JS com prefixo on via atributo de um objeto DOM
		// character-creation.html -> <form id="name-form" onsubmit="return changeFocus(event)">
	Especificar o tratador de evento com a função addEventListener - registro do evento no JS
		// character-creation-controller -> submitButton.addEventListener('click', (event))
	Usar o operador this em funções tratadoras de eventos.
		// first-screen-controller -> multiclassFields[i].disabled = !this.checked;

Objetos Nativos
	Usar pelo menos 3 métodos de manipulação de array
		// 1 - first-screen-controller -> Sorting alphabetically 
		// 2 - select-campaign-controller -> pushCampaing(campaignName)
		// 3 - select-campaign-controller -> updateButtonContent (slice) (escolhido no lugar de outro metodo de manipulacao de string para cumprir requisito)
	Usar laço de repetição (for..in ou for..of ou forEach)
		// second-screen-controller -> Varias
	Usar pelo menos 3 métodos para manipulação de string
		// 1 - select-campaign-controller -> updateButtonContent() || toLowerCase()
		// 2 - select-campaign-controller -> updateButtonContent() || toUpperCase()
		// 3 - select-campaign-controller -> updateButtonContent() || concat()
	String Template - a String com crase e ${}
		// select-campaign-controller -> appendElements()
	Manipulação do CSS de forma nativa via atributo style e classList
		// select-campaign-controller -> Utility buttons, refactored

Objetos
	Criar objeto usando função construtora ou notação literal
		// character-creation-controller -> Character Object
	(Obrigatório) Criar objetos a partir da definição de classes do ES6 - a classe precisa ser definida em arquivo separado, sendo o nome do arquivo em letras minúsculas no estilo dashed-case e nome da classe em UpperCamelCase
		// character.js -> Inteiro
	Usar herança prototipal nativa ou herança de classes do ES6
		// base-form-validator || log-in-validator || sign-in-validator
	
	
____________________________________________________________________________________________
*** Segunda Etapa ***

Qualidade do código
	Usar um Style Guide - apresentar o uso de pelo menos 10 regras do style escolhido (sugerido AirBnb)
		// Documentado em txt
	Usar um Lint - corrigir todos os problemas informados pelo lint (sugerido JSHint - usar o arquivo .jshintrc disponível no moodle)
		// Documentado em txt
	Usar strict mode - em todos os arquivos
		// Utilizado em todos os arquivos
	Usar Module Pattern com função auto-executável ou o conceito de módulo do ES6 com operadores export e import
		// second-screen-controller -> changeStats
	Usar pasta assets e subpastas resources e libraries para organizar o código
		// Alterado, verificar com professor
	Usar let ou const ao invés de var
		// Utilizado
	Nomes de arquivos HTML, JS e CSS minúsculos e separados por hífen (dashed-case)
		// Utilizado
	
Formulário
	Validação de formulário com onsubmit usando os métodos tradicionais - é a fase executada após a validação via HTML5
		// Utilizado em character-creation.html e character-creation-controller.js (<form id="name-form" onsubmit="return changeFocus(event)">)
	Validação de formulário com HTML5 API
		// Log-in & Sign-In
		Customizar as mensagens nos balões de mensagem
			// Log-in & Sign-in, sign-in-validator.js
		Usar os atributos de validação dos inputs - required ou type="email" ou outros
			// Log-in & Sign-in
		Usar expressões regulares para validação - usar no atributo pattern do respectivo input 
			// Sign-in
	Ler e escrever em elementos input com a propriedade value
		// Sign-in, sign-in-validator.js, para apagar a senha e exibir erro.
	Alterar o conteúdo de elementos div ou p com a propriedade innerHTML ou textContent
		// Character-creation e select-campaign
	Manipulação de elemento de listagem, como checkbox, radio ou select
		// Character-creation, switch de multi-class
	Acesso aos elementos de um formulário via hierarquia (caminho) de objetos, ou seja, array forms e elements
		// sign-in-validator, character-creation
____________________________________________________________________________________________
*** Terceira Etapa ***

jQuery

	Uso de seletores CSS - id, classe e tag
		// campaign-view-controller -> Fancy buttons com jQuery
	Uso de seletores hierárquicos estáticos - ancestral/descendente, pai/filho, anterior/próximo
		// select-campaign-controller -> Fancy buttons, mas selecionados de maneira diferente
	Uso de seletores hierárquicos dinâmicos - parent/children/next
		//	campaign-view-controller -> Fancy buttons com jQuery, encontrando "next" hidden-content
	Efeitos fade ou slide
		//	campaign-view-controller -> Fancy buttons, efeito de slide
	Especificar o tratador de algum evento via jQuery
		// character-creation-controler -> Usado no plugin para tratar evento de "on click"
	Manipulação do CSS via função css() e addClass()/removeClass()
		// campaign-view-controller -> Fancy buttons com jQuery
	Manipulação do conteúdo de um input e div usando jQuery
		// character-creation-controller -> Nome gerado aleatoriamente substitui input
	Aplicar um plugin do jQuery (por exemplo, jQuery Mask Plugin)
		// Usado nos modal de jQuery em select-campaign

Web Storage

Leitura e escrita de dados simples - dados primivos como string, number, boolean

Leitura e escrita de JSON - dado transformado a partir de um object
	// Utilizado no envio do formulario para o banco de dados
Criar e atribuir um dado em um Cookie - opcionalmente, ler e apresentar o valor na tela
	// Utilizado para salvar o e-mail em cookie (log-in)

Ajax com Backend

	Requisições AJAX para uma implementação funcional do backend em ExpressJS na plataforma Node
		// Verificar com o professor se a implementacao do banco de dados e toda a magia negra que fiz conta
	(Obrigatório) Requisições AJAX para uma API Fake - JSON Server 
	Requisições AJAX para uma API Rest pública qualquer (Busca CEP API ou IBGE API ou outra).
		// https://randomuser.me/documentation#format -> Nome gerado aleatoriamente em character-creation